generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Address {
  addressId    Int       @id @default(autoincrement())
  customerId   Int
  addressLine1 String?
  addressLine2 String?
  latitude     Float?
  longitude    Float?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  deletedAt    DateTime?
  User         User      @relation(fields: [customerId], references: [userId])
  receiveOrder Order[]   @relation("AddressToOrder_receiveAddressId")
  sendOrder    Order[]   @relation("AddressToOrder_sendAddressId")

  @@index([customerId], name: "FK_Address_Customer")
}

model Order {
  orderId          String     @id
  senderId         Int
  sendAddressId    Int
  receiverId       Int
  receiveAddressId Int
  driverId         Int?
  status           String?
  qrcode           String?
  comments         String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now())
  deletedAt        DateTime?
  driver           User?      @relation("Order_driverIdToUser", fields: [driverId], references: [userId])
  receiverAddress  Address    @relation("AddressToOrder_receiveAddressId", fields: [receiveAddressId], references: [addressId])
  receiver         User       @relation("Order_receiverIdToUser", fields: [receiverId], references: [userId])
  senderAddress    Address    @relation("AddressToOrder_sendAddressId", fields: [sendAddressId], references: [addressId])
  sender           User       @relation("Order_senderIdToUser", fields: [senderId], references: [userId])
  logs             OrderLog[]

  @@index([driverId], name: "FK_Order_OrderDriver")
  @@index([receiveAddressId], name: "FK_Order_ReceiveAddress")
  @@index([receiverId], name: "FK_Order_Receiver")
  @@index([sendAddressId], name: "FK_Order_SendAddress")
  @@index([senderId], name: "FK_Order_Sender")
}

model OrderLog {
  orderLogId Int       @id @default(autoincrement())
  orderId    String
  status     String?
  comments   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?
  order      Order     @relation(fields: [orderId], references: [orderId])

  @@index([orderId], name: "FK_OrderLog_Order")
}

model User {
  userId        Int       @id @default(autoincrement())
  firstName     String?
  lastName      String?
  email         String    @unique
  phone         String?
  username      String    @unique
  password      String
  role          User_role
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  deletedAt     DateTime?
  addresses     Address[]
  followers     Friend[]  @relation("Friend_receiverIdToUser")
  following     Friend[]  @relation("Friend_senderIdToUser")
  deliverOrders Order[]   @relation("Order_driverIdToUser")
  sendOrders    Order[]   @relation("Order_receiverIdToUser")
  receiveOrders Order[]   @relation("Order_senderIdToUser")
}

model Friend {
  friendId   Int       @id @default(autoincrement())
  senderId   Int
  receiverId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?
  receiver   User      @relation("Friend_receiverIdToUser", fields: [receiverId], references: [userId])
  sender     User      @relation("Friend_senderIdToUser", fields: [senderId], references: [userId])

  @@unique([senderId, receiverId], name: "UC_Friend_Sender_Receiver")
  @@index([receiverId], name: "FK_Friend_Receiver")
}

enum User_role {
  customer
  admin
  driver
}
