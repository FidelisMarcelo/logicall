type Query {
  me: User
  users(search: String!): [User]
  user(userId: Int!): User
  addresses(userId: Int!): [Address]
}

type Mutation {
  signUp(input: SignUpInput): User!
  signIn(input: SignInInput): User!
  signOut: String

  addFriend(userId: Int!): User
}

type User {
  userId: ID
  firstName: String
  lastName: String
  email: String
  username: String
  role: String
  receiveOrders: [Order]
  sendOrders: [Order]
  deliverOrders: [Order]
  followees: [Follow]
  followers: [Follow]
  addresses: [Address]
  createdAt: String
  updatedAt: String
  deletedAt: String
}

type Follow {
  followerId: Int
  followeeId: Int
  followee: User!
  follower: User!
}

type Order {
  orderId: ID!
  sender: User
  senderAddress: Address
  receiver: User
  receiverAddress: Address
  driver: User
  status: String
  qrcode: String
  comments: String
  logs: [OrderLog]
  createdAt: String
  updatedAt: String
  deletedAt: String
}

type Address {
  addressId: ID
  User: User
  address: String
  district: String
  latitude: Float
  longitude: Float
  createdAt: String
  updatedAt: String
  deletedAt: String
}

type OrderLog {
  orderLogId: ID!
  order: Order
  status: String
  comments: String
  createdAt: String
  updatedAt: String
  deletedAt: String
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
  role: String!
}

input SignInInput {
  username: String!
  password: String!
  role: String!
}
