generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  addressId    Int       @id @default(autoincrement())
  customerId   Int
  address      String?
  district     String?
  latitude     Float?
  longitude    Float?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  deletedAt    DateTime?
  User         User      @relation(fields: [customerId], references: [userId])
  receiveOrder Order[]   @relation("AddressToOrder_receiveAddressId")
  sendOrder    Order[]   @relation("AddressToOrder_sendAddressId")
}

model Order {
  orderId          String     @id
  senderId         Int
  sendAddressId    Int
  receiverId       Int
  receiveAddressId Int
  driverId         Int?
  status           String?
  qrcode           String?
  comments         String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now())
  deletedAt        DateTime?
  driver           User?      @relation("Order_driverIdToUser", fields: [driverId], references: [userId])
  receiverAddress  Address    @relation("AddressToOrder_receiveAddressId", fields: [receiveAddressId], references: [addressId])
  receiver         User       @relation("Order_receiverIdToUser", fields: [receiverId], references: [userId])
  senderAddress    Address    @relation("AddressToOrder_sendAddressId", fields: [sendAddressId], references: [addressId])
  sender           User       @relation("Order_senderIdToUser", fields: [senderId], references: [userId])
  logs             OrderLog[]
}

model OrderLog {
  orderLogId Int       @id @default(autoincrement())
  orderId    String
  status     String?
  comments   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?
  order      Order     @relation(fields: [orderId], references: [orderId])
}

model User {
  userId        Int       @id @default(autoincrement())
  firstName     String?
  lastName      String?
  email         String    @unique
  phone         String?
  username      String    @unique
  password      String
  role          role
  avatarUri     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  deletedAt     DateTime?
  addresses     Address[]
  followers     Follow[]  @relation("Follow_followeeIdToUser")
  followees     Follow[]  @relation("Follow_followerIdToUser")
  deliverOrders Order[]   @relation("Order_driverIdToUser")
  receiveOrders Order[]   @relation("Order_receiverIdToUser")
  sendOrders    Order[]   @relation("Order_senderIdToUser")
}

model Follow {
  followId   Int       @id @default(autoincrement())
  followerId Int
  followeeId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?
  followee   User      @relation("Follow_followeeIdToUser", fields: [followeeId], references: [userId])
  follower   User      @relation("Follow_followerIdToUser", fields: [followerId], references: [userId])

  @@unique([followerId, followeeId], name: "Follow_followerId_followeeId_key")
}

enum role {
  customer
  admin
  driver
}
