type Query {
  me: User
  users(search: String!): [User]
  user(userId: Int!): User
  orders: [Order]
}

type Mutation {
  signUp(input: SignUpInput): User!
  signIn(input: SignInInput): User!
  signOut: String

  createOrder(input: CreateOrderInput): Order
  updateOrderStatus(input: UpdateOrderStatusInput): Order

  createJob(origin: String): Job
}

type LatLng {
  latitude: Float
  longitude: Float
}

type User {
  userId: ID
  firstName: String
  lastName: String
  email: String
  username: String
  phone: String
  role: String
  receiveOrders: [Order]
  sendOrders: [Order]
  driverOrders: [Order]
  jobs: [Job]
  createdAt: String
  updatedAt: String
  deletedAt: String
}

type Order {
  orderId: ID!
  sender: User
  sendAddress: String
  sendLatLng: LatLng
  receiver: User
  receiveAddress: String
  receiveLatLng: LatLng
  status: String
  comments: String
  logs: [OrderLog]
  jobs: [Job]
  createdAt: String
  updatedAt: String
  deletedAt: String
}

type Job {
  jobId: ID!
  driver: User
  order: Order
  status: String
  polyline: String
}

type OrderLog {
  orderLogId: ID!
  order: Order
  status: String
  comments: String
  createdAt: String
  updatedAt: String
  deletedAt: String
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  username: String!
  password: String!
  role: String!
}

input SignInInput {
  username: String!
  password: String!
  role: String!
}

input CreateOrderInput {
  receiverId: Int
  sendAddress: String
  sendLatLng: String
  receiveAddress: String
  receiveLatLng: String
}

input UpdateOrderStatusInput {
  orderId: String
  status: String
  comments: String
}
